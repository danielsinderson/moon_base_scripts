"""
script that imports a json markov model and produces text from it
"""

import sys, json, random


def import_json_model(path: str) -> dict:
    with open(path) as json_file:
        model: dict = json.load(json_file)
    
    return model


def generate_text(path: str, iterations: int) -> str:
    model: dict = import_json_model(path)
    
    starter_words = [
        "you",
        "i",
        "they",
        "it",
        "these",
        "do",
        "what",
        "where",
        "why",
        random.choice(list(model.keys()))
    ]
    first_word = random.choice(starter_words)
    words = [first_word]
    for i in range(iterations):
        next_word = random.choice(model[words[i]])
        words.append(next_word)
    
    return f"""
    Here's block of text generated by a lo-fi Markov Chain.
    It wants to be a poem. Try to turn it into one.

    
    {" ".join(words[:5])}
    {" ".join(words[5:10])}
    {" ".join(words[10:15])}
    {" ".join(words[15:20])}
    {" ".join(words[20:25])}
    {" ".join(words[25:30])}
    {" ".join(words[30:35])}
    {" ".join(words[35:40])}
    {" ".join(words[40:45])}
    {" ".join(words[45:50])}
    """


def main():
    if len(sys.argv) < 2:
        print("Sorry, you must specify a path to a .json file")
    if sys.argv[1][-5:] != ".json":
        print("Sorry, you must specify a path to a .json file")
    
    path = sys.argv[1]
    iterations = 50 if len(sys.argv) < 3 else int(sys.argv[2])
    text_block: str = generate_text(path, iterations)
    
    print(text_block)


if __name__ == "__main__":
    main() 
